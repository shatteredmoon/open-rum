Getting RUM/CUO up and running

1) Obtain the repository (default assumption is C:/Repository/rum/trunk)

2) Download qt opensource 5.15.2 http://download.qt.io/archive/qt/
    a) Install to C:\Qt\5.15.2
    b) Optionally delete subfolder examples to save ~70MB
    c) If you intend to make modifications to the editor, you'll also want to download and install qt-creator 4.15

3) Obtain CMake 3.240.0 (or higher)
    a) Where is the source code: C:/git/rum/
    b) Where to build the binaries: C:/git/rum/cmake
    c) File->Delete Cache
    d) Tools->Configure
        i) Visual Studio 16 2019
        ii) Use default native compilers
    e) Press Generate
        i) CMake Error: Found unsuitable Qt version "" from NOTFOUND, this code requires Qt 5.15.2
           Add your QT sdk location to your environmanet PATH += <your QT sdk location>, example: C:\Qt\5.15.2
           Define environment variable QTDIR = <your QT sdk location>, example: C:\Qt\5.15.2

4) Open rum.sln in rum\trunk\cmake and build all for both debug and release

5) Once the binaries are created, you should have the following binaries in rum/trunk:
    rum_client.exe
    rum_client_debug.exe
    rum_client_debug.pdb
    rum_editor.exe
    rum_editor_debug.exe
    rum_editor_debug.pdb
    rum_portal.exe
    rum_portal_debug.exe
    rum_portal_debug.pdb
    rum_server.exe
    rum_server_debug.exe
    rum_server_debug.pdb

rum_client is used for executing the player-facing part of a project created with RUM.
rum_editor is used for creating RUM projects.
rum_portal is the project downloader, patcher, and launcher.
rum_server is used for executing the interal or non-player-facing part of a project created with RUM.

All of these binaries are game-agnostic and can be used to run any game created with the RUM editor.


Project folders:

bin - The default location of where your debug and release executables can be found after building them
client - The location the Ultima client files are published to by default for the Windows Debug release package action entries
export - The location of client and server executable and game files ready for release and distribution
cmake - The solution and project file locations generated by CMake
doc - Project documentation
lib - The default location of where you debug and release libraries can be found after building them
sdk - Third-party SDKs used by RUM/CUO
server - The location the Ultima server files are published to by default for the Windows Debug release package action entries
setup - The Inno Script Studio scripts for generating the RUM_Setup, CUO_Client_Setup, and CUO_Server_Setup installation executables
src - The source code for the RUM client, server, editor, portal, server, and static library
ultima - All game assets and scripts for CUO



The Editor
1. Launch rum_editor.exe
2. Click Open Project or go to File->Open Project
3. Navigate to ultima\game.rum or any other game.rum project
4. Click Open

Projects are broken up into 4 main sections:
Scripts - The Squirrel language scripts that define the game logic
Maps - Binary map files in proprietary rum format
Graphics - Binary graphic files in various standard formats such as PNG, BMP, PCX, and JPEG
Audio - Binary audio files in various standard formats such as OGG, WAV, MID, and MP3

Settings
--------
Used for modifying the project title and UUID. The UUID is used as a unique identifier to distinguish projects from each other in the RUM Portal.


Package Manager
---------------
The Package Manager is used to bulk data into individual archives. The CUO project uses this to bulk maps, graphics, and sound files into packages that are used client-side. Some benefits to packaging data are: files are abstracted away from players making it far more difficult to open and view files (potentially containing hints or secrets), the are far fewer files that player has to download separately, and content is much harder to hack. Unfortunately, making a simple modification to a single file however means that the patcher will download the entire package again.

To build a new package, select New Package from the menu. You will need to provide a package name, a package type, and an export file path.

Select the files you want to be included in your package, and then select Build Selected to generate the new package file.

You can Edit package settings by selected Edit Selected, and delete a packge using Delete Selected.

Any changes to you package must be saved by clicking on Save Selected.


Release Manager
---------------
The Release Manager is used for publishing your game either for testing or for final release. It is recommended that you create a separate debug and release package for each OS that you support.

To create a new Release, selecte New Release and give it a name such as (Windows_Debug). Once the release entry is created, you can select it and create individual publish Actions.

You can create one or more Actions for each release. CUO uses publish Actions to separately publish client audio, client graphics, client maps, etc. You don't not have to create more than one Action, but large projects will be easier to manage by doing so.

To create a new Action, have a Release selected, and select New Action. Provide an action name that describes what the action will do, such as "Copy Client Graphics." Once the Action is created, select the Action by clicking on it. You can now select the files that you want the Action to use when it is published. Be sure to set your Publish Destination for each action, which defines where files are copied to. Either type in a location (relative-paths are preferred) or click the Browse button to select a location. You use the Filter input to display fewer files. If you need to select a file that exists outside of your game project folder, click the Show External Files checkbox. This will switch the root location from your project folder to the folder that contains the Editor executable.

You can modify Action entry settings by selecting Edit Action, and delete an Action entry permanently by selecting Delete Action.

When you want to publish your defined Actions, either select a specific Action and click Publish Action to publish only the single, selectect Action, or press Publish Release to execute all publish Actions for the selected Release.


Patch Manager
-------------
The Patch Manager is used for building CRCs that the Portal and Client use to determine whether or not a file needs to be downloaded, fixed, or updated. You do not need to generate patch information for debug builds, as it is recommended that you do not use the patcher while creating a project. In order to create patch info, you must have already defined a Release using the Release Manager, and published your release.

To create patch info for a Release, select the Release and click Generate Patch. Every file published by the defined Release Actions will be entered into a patch database with a filename, CRC info (using MD5) and optionally, whether or not the file is editable on the client.

To fine-tune the generate patch database, you have two options: Remove Patch File and Toggle Editable. Remove Patch File will remove the selected patch table entry. Toggle Editable allows you to designate a patch table entry as "editable," meaning that the client is free to modify this file without triggering a re-download of the file during patching. CUO allows the graphics/border.png file to be modified by clients for example.

To completely clear out a patch table, click Clear Patch Table. To clear all Editable toggles, click Clear Editable Settings.

You will want to publish the patch database with your Server files.


String Manager
--------------
The String Manager is an optional string database used for text localization and abstraction.

There are three string databases for your project:
strings_c.db - client-side strings that are specific to the client and do not contain game clues.
strings_s.db - server-side strings that are specific to the server and contain game clues.
strings_u.db - universal strings that need to be displayed by either the client or server.

To create a New language, select New Language, provide a language name, and the generally accepted language code as defined by the IANA language subtag registry: http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry

You can edit language settings or remove a language entry by selecting Edit Language or Remove Language respectively.

You can export a String Database by selecting the database and clicking Export Database. This will export all database contents to a .csv file at a location you specify.

You can similarly import a String Database by selecting a database and clicking Import Database.

To manually add a new string to the database, select a String Database followed by a Language entry, then select New String. You'll need to provide a token and the actual string itself. The token is a string identifier that is used to identify the string from within the game. The token will be identical across all languages where the string will be different for each language entry.