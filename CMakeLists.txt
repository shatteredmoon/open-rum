# CMakeLists files in this project can
# refer to the root source directory of the project as ${RUM_SOURCE_DIR} and
# to the root binary directory of the project as ${RUM_BINARY_DIR}.

cmake_minimum_required(VERSION 3.5)

message("Creating project")

set(CMAKE_CONFIGURATION_TYPES Debug Release )

project(rum)

set(USE_GLFW ON)
set(USE_FMOD ON)

#function(add_precompiled_header PRECOMPILED_HEADER SOURCE_VARIABLE_NAME)
#  if(MSVC)
#    set(files ${${SOURCE_VARIABLE_NAME}})
#    
#    # Generate precompiled header translation unit
#    get_filename_component(pch_basename ${PRECOMPILED_HEADER} NAME_WE)
#    set(pch_abs ${CMAKE_CURRENT_SOURCE_DIR}/${PRECOMPILED_HEADER})
#    set(pch_unity ${CMAKE_CURRENT_BINARY_DIR}/${pch_basename}.cpp)
#    file(WRITE ${pch_unity} "// Precompiled header unity generated by CMake\n")
#    file(APPEND ${pch_unity} "#include <${pch_abs}>\n")
#    set_source_files_properties(${pch_unity}  PROPERTIES COMPILE_FLAGS "/Yc\"${pch_abs}\"")
#    
#    # Update properties of source files to use the precompiled header.
#    # Additionally, force the inclusion of the precompiled header at beginning of each source file.
#    foreach(source_file ${files} )
#      set_source_files_properties(
#        ${source_file} 
#        PROPERTIES COMPILE_FLAGS
#        "/Yu\"${pch_abs}\" /FI\"${pch_abs}\""
#      )
#    endforeach(source_file)
#    
#    # Finally, update the source file collection to contain the precompiled header translation unit
#    set(${SOURCE_VARIABLE_NAME} ${pch_unity} ${${SOURCE_VARIABLE_NAME}} PARENT_SCOPE)
#  endif(MSVC)
#endfunction(add_precompiled_header)

macro(HEADER_DIRECTORIES rel_dir return_list)
  file(GLOB_RECURSE new_list ${rel_dir})
  set(dir_list "")
  foreach(file_path ${new_list})
    get_filename_component(dir_path ${file_path} PATH)
    set(dir_list ${dir_list} ${dir_path})
  endforeach()
  list(REMOVE_DUPLICATES dir_list)
  set(${return_list} ${dir_list})
endmacro()

if(WIN32)
  add_definitions(-D_WIN32)
  add_definitions(-DWIN32)
else()
  message("ADD YOUR OS DEFINES HERE")
endif()

set(SDK_PATH ${CMAKE_CURRENT_LIST_DIR}/sdk)
message("Using SDK Path: " ${SDK_PATH})

# Automatically include
set(CMAKE_INCLUDE_CURRENT_DIR ON)
list(APPEND CMAKE_PREFIX_PATH ${SDK_PATH})

set(PROJECT_CMAKE_ROOT ${PROJECT_BINARY_DIR})
message("Project cmake directory: " ${PROJECT_CMAKE_ROOT})

include_directories(${CMAKE_CURRENT_LIST_DIR}/src/debugger)
include_directories(${CMAKE_CURRENT_LIST_DIR}/src/lib)
include_directories(${CMAKE_CURRENT_LIST_DIR}/src/platform)

# INI PARSER ------------------------------------------------------------------

include_directories(${SDK_PATH}/iniparser)

# MD5 -------------------------------------------------------------------------

include_directories(${SDK_PATH}/md5)

# OBSERVE ----------------------------------------------------------------------

include_directories(${SDK_PATH}/observe/include)

# SQLITE ----------------------------------------------------------------------

include_directories(${SDK_PATH}/sqlite)

if(${CMAKE_CL_64})
  link_directories(${SDK_PATH}/sqlite/lib/x64)
endif()

# SQUIRREL --------------------------------------------------------------------

include_directories(${SDK_PATH}/sqrat/include)
include_directories(${SDK_PATH}/squirrel/include)
include_directories(${SDK_PATH}/squirrel/squirrel)

if(${CMAKE_CL_64})
  add_definitions(-D_SQ64)
  link_directories(${SDK_PATH}/squirrel/lib/x64)
endif()

# ZLIB ------------------------------------------------------------------------

include_directories(${SDK_PATH}/zlib)

if(${CMAKE_CL_64})
  link_directories(${SDK_PATH}/zlib/lib/x64)
endif()

# -----------------------------------------------------------------------------

#add_definitions(-D_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)

if(WIN32)
  file(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
  file(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
  message("Library output directory: " ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
  message("Runtime output directory: " ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

  link_directories(${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Debug)
  link_directories(${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Release)
endif()

# Recurse into the src subdirectories
ADD_SUBDIRECTORY(src/lib)
ADD_SUBDIRECTORY(src/debugger)
ADD_SUBDIRECTORY(src/server)
ADD_SUBDIRECTORY(src/portal)
ADD_SUBDIRECTORY(src/client)
ADD_SUBDIRECTORY(src/editor)
